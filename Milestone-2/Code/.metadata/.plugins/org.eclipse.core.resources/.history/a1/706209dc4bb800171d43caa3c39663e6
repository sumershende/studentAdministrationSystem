

import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

class ConsoleManager {
	
	private static ConsoleManager consoleManager;
	
	private Scanner sc;
	
	private DBHandler dbHandler;
	
	private ConsoleManager(){
		// Make it singleton
		sc = new Scanner(System.in);
		dbHandler = DBHandler.getDBHandler();
	}
	
	public static ConsoleManager getConsoleManager(){
		if(consoleManager == null) consoleManager = new ConsoleManager();
		return consoleManager;
	}
	
	public void showStartConsole(){
		clearScreen();
		System.out.println("1. Login");
		System.out.println("2. Exit");
	}
	
	
	// Home screen for professor
	public void showProfessorHomeScreen(){
		clearScreen();
		System.out.println("1. View Profile");
		System.out.println("2. View/Add Courses");
		System.out.println("3. Enroll/Drop A Student");
		System.out.println("4. Search/Add questions to Question Bank");
		System.out.println("5. Logout");
	}
	
	public void showTAHomeScreen(){
		clearScreen();
		System.out.println("1. View Profile");
		System.out.println("2. View/Add Courses");
		System.out.println("3. Enroll/Drop A Student");
		System.out.println("4. Logout");
	}
	
	private void showProfileCommonData(){
		System.out.println("1. First Name: " + dbHandler.getLoggedInUserFirstName());
		System.out.println("2. Last Name: " + dbHandler.getLoggedInUserLastName());
		System.out.println("3. Employee Id: " + dbHandler.getLoggedInUserId());
	}
	
	public void showProfProfile(){
		showProfileCommonData();
		
		List<String[]> taughtCourses = dbHandler.getTaughtCoursesByProfessor();
		consoleManager.showCourses(taughtCourses, "Courses taught by you:");
	}
	
	public void showTAProfile(){
		showProfileCommonData();
		
		List<String[]> TACourses = dbHandler.getTACourses();
		showCourses(TACourses, "Courses of which you are TA:");
	}
		
	// Method stack for Student
	public void showStudentHomeScreen(){
		clearScreen();
		showMessageToGoToPreviousMenu();
		System.out.println("1. View/Edit Profile");
		System.out.println("2. View Courses");
		System.out.println("3. Logout");
	}
	
	public void clearScreen(){
		// May implement later if needed. This should only clear the console.
	}
	
	public int askForIntInput(String message){
		int choice;
		
		if (message != null){
			System.out.println(message);
		}else if(dbHandler.isUserLoggedIn()){
			System.out.println("Please enter your choice or press 0 to cancel: ");
		}
		
		try{
			choice = Integer.parseInt(sc.nextLine());
		}catch(NumberFormatException e){
			System.out.println("Invalid input! Please enter a number.");
			return askForIntInput(message);
		}		
		
		return choice;
	}
	
	public String askForStringInput(String message){
		String choice;
		if (message != null){
			System.out.println(message);
		}else if(dbHandler.isUserLoggedIn()){
			System.out.println("Please enter your choice or press 0 to cancel: ");
		}
		
		choice = sc.nextLine();
		
		return choice;
	}
	
	@Override
	protected void finalize() throws Throwable {
	    try {
	        sc.close();
	    } finally {
	        super.finalize();
	    }
	}
	
	public void showInvalidChoiceError(){
		System.out.println("Please select a valid option!");
	}
	
	public void showCourses(List<String[]> courses, String message){
		clearScreen();
		System.out.println("> " + message);
		int i = 1;
		for(String[] course : courses){
			System.out.println("\t" + i++ + ". " + course[0] + " : " + course[1]);
		}
	}
	
	public int askForUserChoiceAfterShowingCourses(boolean isProfessor){
		System.out.println("\n0. Go back.");
		System.out.println("1. View course details.");
		if (isProfessor){
			System.out.println("2. Add new course.");
		}
		return askForIntInput("Please enter your choice: ");
	}
	
	public void showCourseDetails(String courseId){
		Course course = dbHandler.getCourseInfo(courseId);		
		System.out.println("> Course Name: " + course.getCourseName());
		System.out.println("> Course Start Date: " + course.getStartDate());
		System.out.println("> Course End Date: " + course.getEndDate());
		System.out.println("> Current TA(s): ");
		for(String TA : course.getTAs()){
			System.out.println("\t" + TA);
		}
	}
	
	public int askForUserChoiceAfterShowingCourseDetails(boolean isProf){
		System.out.println("\n0. Go back.");
		System.out.println("1. View Exercises.");
		short itemNum = 2;
		if(isProf){
			System.out.println(itemNum++ + ". Add Exercises.");
			System.out.println(itemNum++ + ". Add TA.");
		}
		System.out.println(itemNum++ + ". Enroll a student.");
		System.out.println(itemNum++ + ". Drop a student.");
		System.out.println(itemNum++ + ". View report.");
		
		return askForIntInput("Please enter your choice: ");
	}
	
	private void showMessageToGoToPreviousMenu(){
		System.out.println("Enter 0 to go back to previous menu.");
	}
	
	public Course askNewCourseDetails(){
		showMessageToGoToPreviousMenu();
		String courseId =   askForStringInput("1. Enter Course Id: ");
		if (courseId.equals("0")){
			return null;
		}
		String courseName = askForStringInput("2. Enter Course Name: ");
		if (courseName.equals("0")){
			return null;
		}
		String startDate =  askForStringInput("3. Enter start date: ");
		if (startDate.equals("0")){
			return null;
		}
		String endDate =    askForStringInput("4. Enter end date: ");
		if (endDate.equals("0")){
			return null;
		}
		// Ask student IDs too!
		
		return new Course(courseId, courseName, startDate, endDate, null);
	}
	
	public void showMessageAndWaitForUserToGoBack(String message){
		if(message!=null){
			System.out.println(message);
		}
		
		while(askForIntInput("Please enter 0 to go back.") != 0){
			
		}
	}
	
	public String[] askForNewStudentDetails(String courseId){
		showMessageToGoToPreviousMenu();
		String studentId = askForStringInput("1. Enter Student Id: ");
		if(studentId.equals("0")) return null;
		if(courseId == null){
			courseId = askForStringInput("2. Enter Course Id: ");
			if(courseId.equals("0")) return null;
		}
		return new String[]{studentId, courseId};
	}
	
	public void showReportForCourse(List<StudentReport> studentReports, String courseId){
		System.out.println("Report for course: " + courseId);
		for(StudentReport studentReport : studentReports){
			System.out.println("> First Name: " + studentReport.getFirstName());
			System.out.println("> Last Name: " + studentReport.getLastName());
			System.out.println("> Scores for each exercise: ");
			for(String[] scorePerHW : studentReport.getScoresPerHW()){
				System.out.println("\t" + scorePerHW[0] + ": " + scorePerHW[1]);
			}
		}
		showMessageAndWaitForUserToGoBack("Please enter 0 to go back.");
	}
	
//	public void showExercisesNameAndIdForCourse(String courseId){
//		System.out.println("Exercises in course: " + courseId);
//		List<Exercise> exercisesInThisCourse = dbHandler.getExercisesForCourse(courseId);
//		for(Exercise exercise : exercisesInThisCourse){
//			System.out.println("\tName: " + exercise.getName() + "\tID: " + exercise.getId());
//		}
//	}
	
	public void showExercisesDetailsForCourse(String courseId){
		System.out.println("Details of Exercises in the course: " + courseId);
		List<Exercise> exercisesInThisCourse = dbHandler.getExercisesForCourse(courseId);
		for(Exercise exercise : exercisesInThisCourse){
			System.out.println("> Name: " + exercise.getName());
			System.out.println("> ID: " + exercise.getId());
			System.out.println("> Mode: " + exercise.getExerciseMode());
			System.out.println("> Start Date: " + exercise.getStartDate());
			System.out.println("> End Date: " + exercise.getEndDate());
			System.out.println("> Number of questions: " + exercise.getNumQuestions());
			System.out.println("> Number of retries: " + exercise.getNumRetries());
			System.out.println("> Scoring Policy: " + exercise.getScroingPolicy());
			
			List<Question> questionsInThisExercise = dbHandler.getQuestionsInExercise(exercise.getId());
			showQuestions(questionsInThisExercise, "Questions in this exercise:");
		}
	}
	
	public int askToAddOrRemoveQuestionFromExercise(){
		int choice;
		while(true){
			System.out.println("0. Go back.");
			System.out.println("1. Add question to the exercise.");
			System.out.println("2. Remove question from the exercise.");
			choice = askForIntInput("Please enter your choice: ");
			if(choice == 0 || choice == 1 || choice == 2) break;
			showInvalidChoiceError();
		}
		return choice;
	}
	
	public String askForTAId(){
		showMessageToGoToPreviousMenu();
		String TAId = askForStringInput("Please enter Student ID of TA: ");
		if (TAId.equals("0")){
			// Cancel operation. Go back.
			return null;
		}else{
			return TAId;
		}
	}
	
	public void showQuestions(List<Question> questions, String message){
		int questionNum = 1;
		if(message != null){
			System.out.println("Questions for " + message);
		}
		for(Question question : questions){
			System.out.println("::Question " + questionNum++ + "::");
			System.out.println("> ID: " + question.getId());
			System.out.println("> Text: " + question.getText());
			if(question.getQuestionType() != null){
				System.out.println("> Type: " + question.getQuestionType());
				System.out.println("> Difficulty level: " + question.getDifficultyLevel());
				System.out.println("> Topic Details: ");
				System.out.print("> Hint: " );
				if(question.hasHint()){
					System.out.println(question.getHint() + "\n");
				}else{
					System.out.println("None\n");
				}
				System.out.println("> Topic ID: " + question.getTopicId());
				System.out.println("> Topic Name: " + question.getTopicName());
			}
		}
		// Can display detailed solution too here.
	}
	
	public void showOptionsAtViewQB(){
		System.out.println("\n\n");
		System.out.println("0. Go back.");
		System.out.println("1. Search by Question Id or Topic.");
		System.out.println("2. Add questions to the Question Bank.");
	}
	
	public Question askNewQuestionAndItsAnswerDetails(){
		showMessageToGoToPreviousMenu();
		int id = askForIntInput("Please enter id for the question: ");
		String type = askForStringInput("Please enter question type: ");
		QuestionType questionType = null;
		if(type.equals("0")) return null;
		else if(type.equals("Parameterized")){
			System.out.println("NOTE: Please enter ___ as placeholder for question parameters.");
			System.out.println("NOTE: Please enter ### as the placeholder for answer.");
			questionType = QuestionType.Parameterized;
		}else{
			questionType = QuestionType.Fixed;
		}
		String text = askForStringInput("Please enter question text: ");
		if(text.equals("0")) return null;
		String[][] parameterValues = null;
		int totalValuesForOneParameter = 1;
		if(type.equals("Parameterized")){
			int totalQuestionPlaceholders = getTotalParametersFromQuestionText(text, "___");
			if(totalQuestionPlaceholders == 0){
				System.out.println("No placeholder for parameters found! Converting to Fixed type.");
				questionType = QuestionType.Fixed;
			}else{
				totalValuesForOneParameter = askForIntInput("How many values will you input for any parameter?");
				parameterValues = new String[totalQuestionPlaceholders][totalValuesForOneParameter];
				for(int param = 1 ; param <= totalQuestionPlaceholders ; ++param){
					for(int i = 1 ; i <= totalValuesForOneParameter ; ++i){
						parameterValues[param-1][i-1] = askForStringInput("Please enter " + i + " value for parameter " + param + ": ");
					}
				}
			}
		}
		
		int difficultyLevel = askForIntInput("Please enter difficulty level: ");
		if(difficultyLevel == 0) return null;
		
		int totalCorrectAnswers = 0;
		while(totalCorrectAnswers <= 0){
			totalCorrectAnswers = askForIntInput("How many correct answers will you enter?");
			if(totalCorrectAnswers <= 0){
				System.out.println("At least 1 correct answer is required!");
			}
		}
		
		String[][] correctAnswers = new String[totalValuesForOneParameter][totalCorrectAnswers];
		// Get the correct answer(s)
		for(int ansNum = 0 ; ansNum < totalCorrectAnswers ; ++ansNum){
			if(questionType == QuestionType.Fixed){
				correctAnswers[0][ansNum] = askForStringInput("Please enter the correct answer: ");
			}else{
				int totalAnswerPlaceHolders = getTotalParametersFromQuestionText(text, "###");
				for(int ans = 0 ; ans < totalValuesForOneParameter ; ++ans){
					StringBuilder answer = new StringBuilder();
					for(int placeHolder = 0 ; placeHolder < totalAnswerPlaceHolders ; ++placeHolder){
						answer.append(askForStringInput("Enter the value of " + (placeHolder + 1) + " place holder in the correct answer for combination " + (ans + 1) + ": "));
						if(placeHolder != totalAnswerPlaceHolders - 1)
							answer.append("; ");
					}
					correctAnswers[ans][ansNum] = answer.toString();
				}
			}
		}
		
		// Get the incorrect answer(s)
		int totalIncorrectAnswers = 0;
		while(totalIncorrectAnswers <= 0){
			totalIncorrectAnswers = askForIntInput("How many incorrect answer options will you enter?");
			if(totalIncorrectAnswers <= 0){
				System.out.println("At least 1 incorrect answer is required!");
			}
		}
		String[] incorrectAnswers = new String[totalIncorrectAnswers];
		System.out.println("Note: None of the incorrect answer can be same as any correct answer.");
		for(int incAns = 0 ; incAns < totalIncorrectAnswers ; ++incAns){
			incorrectAnswers[incAns] = askForStringInput("Please enter incorrect answer #" + (incAns+1) + ": ");
		}
		
		String hint = askForStringInput("Please enter the optional hint for the solution: ");
		String detailedSolution = askForStringInput("Please enter the detailed solution: ");
		int topicId = askForIntInput("Please enter the topic Id associated with this question: ");
		
		return new Question(text, hint, null, difficultyLevel, topicId, id, questionType, detailedSolution, parameterValues, correctAnswers, incorrectAnswers);
	}
	
	private int getTotalParametersFromQuestionText(String qText, String placeholder){
		Pattern pattern = Pattern.compile(placeholder);
		Matcher matcher = pattern.matcher(qText);
		int count = 0;
		while(matcher.find()) count++;
		return count;
	}
	
	public Exercise askDetailsAboutNewExercise(ExerciseMode exerciseMode, String courseId){
		// Ask the details of new exercise.
		
		// Ask the exercise Id.
		int exerciseId = askForIntInput("Please enter Id for exercise: ");
		if(exerciseId == 0) return null;
		
		// Ask exercise name.
		String name = askForStringInput("Please enter exercise name: ");
		if(name.equals("0")) return null;
		
		// Ask start date.
		String startDate = askForStringInput("Please enter exercise start date: ");
		if(startDate.equals("0")) return null;
		
		// Ask end date.
		String endDate = askForStringInput("Please enter exercise end date: ");
		if(endDate.equals("0")) return null;
		
		// Ask scoring policy
		System.out.println("Please select the scoring policy: ");
		System.out.println("0. Cancel operation");
		System.out.println("1. Average");
		System.out.println("2. Latest");
		System.out.println("3. Maximum");
		int sP = askForIntInput("Please enter your choice: ");
		
		ScroingPolicy scroingPolicy;
		
		if(sP == 0) return null;
		else if(sP == 1) scroingPolicy = ScroingPolicy.Average;
		else if(sP == 2) scroingPolicy = ScroingPolicy.Latest;
		else scroingPolicy = ScroingPolicy.Maximum;
		
		// Ask number of retries allowed.
		int numRetries = askForIntInput("Please enter number of allowed retires (Enter -1 for unlimited retries.): ");
		
		// Ask the number of questions in the exercise.
		int numQuestions = askForIntInput("Please enter the number of questions in the exercise: "); 
		while(numQuestions < 1){
			System.out.println("At least 1 question must be present in the exercise!");
			numQuestions = askForIntInput("Please enter the number of questions in the exercise: ");
		}
		
		// Ask about the points per correct answer:
		int pointsPerCorrectAnswer = askForIntInput("Please enter the points awarded for each correct answer: ");
		while(pointsPerCorrectAnswer < 1){
			System.out.println("Points awarded for any correct answer should be at least 1!");
			pointsPerCorrectAnswer = askForIntInput("Please enter the points awarded for each correct answer: ");
		}
		
		// Ask about the points per incorrect answer:
		int pointsPerIncorrectAnswer = askForIntInput("Please enter the points deducted for each incorrect answer: ");
		while(pointsPerIncorrectAnswer < 0){
			System.out.println("Points deducted for any incorrect answer cannot be negative!");
			pointsPerIncorrectAnswer = askForIntInput("Please enter the points deducted for each incorrect answer: ");
		}
		
		// Ask whether he wants to add questions to the exercise right now.
		List<String> qIds = null;
		String choice = askForStringInput("Do you want to add questions right now? (y/n): ");
		if(choice.equals("y")){
			// Get the questions
			
		}
		
		// Professor successfully entered the information about exercise.
		return new Exercise(exerciseMode, scroingPolicy, name, startDate, endDate, numQuestions, numRetries, exerciseId, qIds);
	}
}
