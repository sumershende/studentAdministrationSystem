class ProfessorHandler extends TAHandler{
	
	public static void execute(){
		consoleManager = ConsoleManager.getConsoleCreator();
		dbHandler = DBHandler.getDBHandler();
		
		int choice;
		
		fName = dbHandler.getLoggedInUserFirstName();
		lName = dbHandler.getLoggedInUserLastName();
		eId   = dbHandler.getLoggedInUserId();
		
		while(true){
			consoleManager.createProfessorHomeScreen();
			choice = consoleManager.askForIntInput("Please enter your choice: ");
			
			if (choice == 1){
				// View Profile
				viewProfile();
			}else if(choice == 2){
				// View/Add Courses
				viewOrAddCourses();
			}else if(choice == 3){
				// Enroll/Drop A Student
				String prompt = "1. Enroll a student\n2. Drop a student\nPress 0 to go back.";
				int subChoice = -1;
				while (subChoice != 0){
					switch(consoleManager.askForIntInput(prompt)){
					case 0:
						subChoice = 0;
						break;
					case 1:
						enrollOrDropStudent(true, null);
						break;
					case 2:
						enrollOrDropStudent(false, null);
						break;
					default:
						consoleManager.displayInvalidChoiceError();
					}
				}
			}else if(choice == 4){
				// Search/Add questions to Question Bank
				
			}else if(choice == 5){
				// Logout
				if(dbHandler.logout()) break;
				else consoleManager.showMessage("Error logging out.");
			}else{
				consoleManager.displayInvalidChoiceError();
			}
		}
	}
	
	private static void viewOrAddCourses(){
		int choice;
		while(true){
			displayTaughtCourses();
			choice = consoleManager.askForIntInput("Please enter your choice:");
			if (choice == 0){
				break;
			}else if(choice == 1){
				// View a particular course.
				String courseId = consoleManager.askForStringInput("Please enter the course ID:");
				while(choice != 0){
					consoleManager.displayCourseDetails(courseId, dbHandler.isProfessor());
					choice = consoleManager.askForIntInput("Please enter your choice: ");
					switch (choice) {
					case 0:
						// Return
						break;
					case 4:
						// View Exercises
						viewOrEditExercises(courseId);
						choice = 1;
						break;
					case 5:
						// Add exercise
						addExercises(courseId);
						choice = 1;
						break;
					case 7:
						// Add TA
						addTA();
						choice = 1;
						break;
					case 8:
						// Enroll a student
						enrollOrDropStudent(true, courseId);
						choice = 1;
						break;
					case 9:
						// Drop a student
						enrollOrDropStudent(false, courseId);
						choice = 1;
						break;
					case 10:
						// View report
						viewReport(courseId);
						choice = 1;
						break;
					default:
						consoleManager.displayInvalidChoiceError();
						break;
					}
				}
			}else if(choice == 2){
				// Add a new course.
				choice = 0;
				Course newCourse = consoleManager.askNewCourseDetails();
				if (newCourse == null){
					// User cancelled the operation.
					
				}else{
					// Add this new course.
					if(dbHandler.addNewCourse(newCourse)){
						// Successfully added the course
						consoleManager.showMessage("New course successfully added.");
					}else{
						// Error adding the new course.
						consoleManager.showMessage("Sorry, there was an error while adding the new course. Please try again.");
					}
				}
			}else{
				consoleManager.displayInvalidChoiceError();
			}
		}
	}
	
	private static void displayTaughtCourses(){
		// Shows the subjects taught by the professor.
		String [][] taughtCourses = dbHandler.getTaughtCoursesByProfessor();
		consoleManager.displayCourses(taughtCourses, "Courses taught by you:", dbHandler.isProfessor());
	}
	
	private static void addTA(String courseId){
		
	}	
}
