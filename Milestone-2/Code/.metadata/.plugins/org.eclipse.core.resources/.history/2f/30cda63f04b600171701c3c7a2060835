

import java.util.Scanner;

class ConsoleManager {
	
	private static ConsoleManager consoleManager;
	
	private Scanner sc;
	
	private DBHandler dbHandler;
	
	private ConsoleManager(){
		// Make it singleton
		sc = new Scanner(System.in);
		dbHandler = DBHandler.getDBHandler();
	}
	
	public static ConsoleManager getConsoleCreator(){
		if(consoleManager == null) consoleManager = new ConsoleManager();
		return consoleManager;
	}
	
	public void createStartConsole(){
		clearScreen();
		System.out.println("1. Login");
		System.out.println("2. Exit");
	}
	
	
	// Method stack for professor
	public void createProfessorHomeScreen(){
		clearScreen();
		System.out.println("1. View Profile");
		System.out.println("2. View/Add Courses");
		System.out.println("3. Enroll/Drop A Student");
		System.out.println("4. Search/Add questions to Question Bank");
		System.out.println("5. Logout");
	}
	
	public void showProfOrTAProfile(String fName, String lName, String eId){
		clearScreen();
		showMessageToGoToPreviousMenu();
		System.out.println("1. First Name: " + fName);
		System.out.println("2. Last Name: " + lName);
		System.out.println("3. Employee Id: " + eId);
	}
	
	
	// Method stack for TA
	public void showTAHomeScreen(){
		clearScreen();
		showMessageToGoToPreviousMenu();
		System.out.println("1. View Profile");
		System.out.println("2. View/Add Courses");
		System.out.println("3. Enroll/Drop A Student");
		System.out.println("4. Logout");			
	}
	
	
	// Method stack for Student
	public void showStudentHomeScreen(){
		clearScreen();
		showMessageToGoToPreviousMenu();
		System.out.println("1. View/Edit Profile");
		System.out.println("2. View Courses");
		System.out.println("3. Logout");
	}
	
	public void clearScreen(){
		// May implement later if needed. This should only clear the console.
	}
	
	public int askForIntInput(String message){
		int choice;
		
		if (message != null){
			System.out.println(message);
		}
		
		try{
			choice = Integer.parseInt(sc.nextLine());
		}catch(NumberFormatException e){
			System.out.println("Invalid input! Please enter a number.");
			return askForIntInput(message);
		}		
		
		return choice;
	}
	
	public String askForStringInput(String message){
		String choice;
		
		if (message != null){
			System.out.println(message);
		}
		
		choice = sc.nextLine();
		
		return choice;
	}
	
	@Override
	protected void finalize() throws Throwable {
	    try {
	        sc.close();
	    } finally {
	        super.finalize();
	    }
	}
	
	public void displayInvalidChoiceError(){
		System.out.println("Please select a valid option!");
	}
	
	public void displayCourses(String[][] courses, String message, boolean isProfessor){
		clearScreen();
		System.out.println(message);
		for(String[] course : courses){
			System.out.println(course[0] + " : " + course[1]);
		}
		System.out.println("\n1. View course details.");
		if (isProfessor){
			System.out.println("2. Add new course.");
		}
		showMessageToGoToPreviousMenu();
	}
	
	public void displayCourseDetails(String courseId, boolean isProf){
		Course course = dbHandler.getCourseInfo(courseId);
		System.out.println("\n1. Course Name: " + course.getCourseName());
		System.out.println("2. Course Start Date: " + course.getStartDate());
		System.out.println("3. Course End Date: " + course.getEndDate());
		System.out.println("4. View Exercises.");
		System.out.println("5. Add Exercises.");
		System.out.println("6. Current TA(s): ");
		for(String TA : course.getTAs()){
			System.out.println("\t" + TA);
		}
		short itemNum = 7;
		if(isProf){
			System.out.println("7. Add TA.");
			itemNum++;
		}
		System.out.println(itemNum++ + ". Enroll a student.");
		System.out.println(itemNum++ + ". Drop a student.");
		System.out.println(itemNum++ + ". View report.");
		
		showMessageToGoToPreviousMenu();
	}
	
	private void showMessageToGoToPreviousMenu(){
		System.out.println("Enter 0 anytime to go back to previous menu.");
	}
	
	public Course askNewCourseDetails(){
		showMessageToGoToPreviousMenu();
		String courseId =   askForStringInput("1. Enter Course Id: ");
		if (courseId.equals("0")){
			return null;
		}
		String courseName = askForStringInput("2. Enter Course Name: ");
		if (courseName.equals("0")){
			return null;
		}
		String startDate =  askForStringInput("3. Enter start date: ");
		if (startDate.equals("0")){
			return null;
		}
		String endDate =    askForStringInput("4. Enter end date: ");
		if (endDate.equals("0")){
			return null;
		}
		return new Course(courseId, courseName, startDate, endDate, null);
	}
	
	public void showMessage(String message){
		System.out.println(message);
		showMessageToGoToPreviousMenu();
		askForStringInput(null);
	}
	
	public String[] askForNewStudentDetails(String courseId){
		showMessageToGoToPreviousMenu();
		String studentId = askForStringInput("1. Enter Student Id: ");
		if(studentId.equals("0")) return null;
		if(courseId == null){
			courseId = askForStringInput("2. Enter Course Id: ");
			if(courseId.equals("0")) return null;
		}
		return new String[]{studentId, courseId};
	}
	
	public void showStudentReport(StudentReport studentReport, String courseId){
		System.out.println("1. First Name: " + studentReport.getFirstName());
		System.out.println("2. Last Name: " + studentReport.getLastName());
		System.out.println("3. Scores for each exercise: ");
		for(String[] scorePerHW : studentReport.getScoresPerHW()){
			System.out.println("\t" + scorePerHW[0] + ": " + scorePerHW[1]);
		}
		int choice;
		while(true){
			showMessageToGoToPreviousMenu();
			choice = askForIntInput("Please enter your choice: ");
			if(choice == 0) break;
			displayInvalidChoiceError();
		}
	}
	
	public void showExercisesForCourse(String courseId){
		String[][] exercisesInThisCourse = dbHandler.getExercisesForCourse(courseId);
		for(String[] exerciseDetails : exercisesInThisCourse){
			System.out.println("\tName: " + exerciseDetails[0] + "\tID: " + exerciseDetails[1]);
		}
	}
	
	public int askToAddOrRemoveQuestionFromExercise(){
		int choice;
		while(true){
			showMessageToGoToPreviousMenu();
			System.out.println("1. Add question to the exercise.");
			System.out.println("2. Remove question from the exercise.");
			choice = askForIntInput("Please enter your choice: ");
			if(choice == 0 || choice == 1 || choice == 2) break;
			displayInvalidChoiceError();
		}
		return choice;
	}
	
	public String askForTAId(){
		showMessageToGoToPreviousMenu();
		String TAId = askForStringInput("Please enter Student ID of TA: ");
		if (TAId.equals("0")){
			// Cancel operation. Go back.
			return null;
		}else{
			return TAId;
		}
	}
}
